keywords: ["particubes", "game", "mobile", "scripting", "cube", "voxel", "world"]
type: "Player"
extends: "Object"
description: |
    Player is a shortcut to [Client].[Player].
    
    Represents the local Player.

properties:
    - name: "BlockUnderneath"
      type: "Block"
      description: "Returns the block on which the Player is standing on."
    - name: "BlocksUnderneath"
      type: "array"
      description: "Returns an [array] of [Block]s the player is standing on"
      samples:
        - code: |
            local blocks = Player.BlocksUnderneath
            for index, value in ipairs(blocks) do 
                -- greenColorIndex is a block previously defined
                local newBlock = Block(10) -- 10: BlockerProperties index
                value:Replace(newBlock)
            end
    - name: "ID"
      type: "Number"
      description: "Unique player ID for played game. A different ID can be attributed after reconnection."
    - name: "Username"
      type: "String"
      description: "Player's account username. Usernames are unique."
    - name: "IsOnGround"
      type: "Boolean"
      description: "`true` when there's a block right underneath Player's feet."
    - name: "Position"
      type: "Number3"
      description: "Absolute world position of the Player."
    - name: "Rotation"
      type: "Number3"
      description: "Player's rotation. (Y value is not considered)"
    - name: "Velocity"
      type: "Number3"
      description: "Player's velocity (speed + direction)."
     - name: "Wave"
      type: "Boolean"
      description: "Set the player animation wave to true or false."

functions:
    - name: "CastRay"
      description: "Casts a ray from player's position,
          returns an [Impact] if it hits something, [nil] otherwise."
      return:
        - type: "Impact"
      samples:
        - code: |
            local impact = Player:CastRay()
            if impact ~= nil then
            	print(impact)
            end

    - name: "Give"
      description: "Gives an item to the [Player].
          The parameter has to be an holdable item. (items can be browsed in the gallery)"
      arguments:
        - name: "itemGiven"
          type: "Item"
      samples:
        - code: |
            Import("aduermael.rainbow_sword")

            Player:Give(R.aduermael.rainbow_sword)

