keywords: ["particubes", "game", "mobile", "scripting", "cube", "voxel", "world"]
type: "Pointer"
description: |
    Pointer is a shortcut to [Client].[Pointer].
    
    Pointer allows to catch user pointer events. Mouse events or touch events depending on the device.

    The goal is to create an abstraction for world inputs to work on any platform. A world that's been developped on PC should work great on mobile, and the developer shouldn't have to worry about this. 

blocks:
    - text: |
        Pointer is a shortcut to [Client].[Pointer].
      
        Pointer allows to catch user pointer events. Mouse events or touch events depending on the device.

        The goal is to create an abstraction for world inputs to work on any platform. A world that's been developped on PC should work great on mobile, and the developer shouldn't have to worry about this. 

        So even if there's no such thing as a visual pointer on a touch screen, we do consider 2 modes: `pointer shown` and `pointer hidden`.

    - subtitle: "Pointer shown"

    - text: |
        Switching to that mode when calling [Pointer:Show()](/reference/pointer#functions-show).

        When the pointer is shown, users can activate UI buttons.

        [Pointer.Down](/reference/pointer#property-down) and [Pointer.Up](/reference/pointer#property-up) functions are called on left clicks or one finger touches (when the action is not cached by a button or other UI input first).

        [Pointer.Drag](/reference/pointer#property-drag) is called when moving the mouse or finger between `down` and `up` events.

        [Pointer.Drag2](/reference/pointer#property-drag) is called when moving the mouse while pressing right click, or moving on a touch screen with 2 fingers down. (we don't support right click up/down events because we can't get the same level of precision on a touch screen)

        [Pointer.Zoom](/reference/pointer#property-drag) is called scrolling with the mouse wheel or pinching in/out with 2 fingers.

        Some actions are disabled when the pointer is shown (like [Client.AnalogPad](/reference/client#property-analogpad), [Client.Action2](/reference/client#property-action2), [Client.Action2Release](/reference/client#property-action2release), [Client.Action3](/reference/client#property-action3), [Client.Action3Release](/reference/client#property-action3release))

        But [Client.DirectionalPad](/reference/client#property-directionalpad), [Client.Action1](/reference/client#property-action1) & [Client.Action1](/reference/client#property-action1release) remain available.

    - subtitle: "Pointer hidden"

    - text: |
        Switching to that mode when calling [Pointer:Hide()](/reference/pointer#functions-hide).

        When the pointer is hidden, you can't select things in the 3D scene with the mouse cursor or fingers. But you other actions are available:

        [Client.DirectionalPad](/reference/client#property-directionalpad) is called when activating directional keys (WASD keys on a QWERTY keyboard by default) or the directional pad on touch screens (available in both modes).

        [Client.AnalogPad](/reference/client#property-analogpad) is called when moving the mouse or moving on a touch screen with one finger down. It's often used to control the camera.

        All 3 action buttons are available: [Client.Action1](/reference/client#property-action1), [Client.Action1Release](/reference/client#property-action1release), [Client.Action2](/reference/client#property-action2), [Client.Action2Release](/reference/client#property-action2release), [Client.Action3](/reference/client#property-action3), [Client.Action3Release](/reference/client#property-action3release)


functions:
    - name: "Show"
      description: |
          [Pointer] callbacks start being triggered on mouse and touch events.

          User interface elements such as [Button]s become active.
      samples:
        - code: |
            Pointer:Show()
    - name: "Hide"
      description: |
          Virtual game pads appear on touch screens. 

          Direction keys and gamepad start triggering [Client.DirectionDidChange](/reference/client#property-directiondidchange) 

          The pointer is hidden by default.
      samples:
          - code: |
              Pointer:Hide()

properties:

    - name: "Down"
      type: function
      description: "Triggered when pressing the pointer. (left click or one finger touch down)"
      samples:
        - code: |
            Pointer.Down = function( pointerEvent )
              
            end

    - name: "Drag"
      type: function
      description: "Triggered when the pointer is dragged (moved while down)."
      samples:
        - code: |
            Pointer.Drag = function( pointerEvent )
                print(pointerEvent.DX, pointerEvent.DY)
            end

    - name: "Drag2"
      type: function
      description: "Triggered when the pointer is moved with right mouse button or 2 touch fingers down."
      samples:
        - code: |
            Pointer.Drag2 = function( pointerEvent )
                print(pointerEvent.DX, pointerEvent.DY)
            end

    - name: "Up"
      type: function
      description: "Triggered when the pointer is released."
      samples:
        - code: |
            Pointer.Up = function( pointerEvent )

            end

    - name: "Zoom"
      type: function
      description: "Triggered when scrolling with mouse or pinching in/out with 2 fingers."
      samples:
        - code: |
            Pointer.Zoom = function( pointerEvent )

            end

    - name: "IsHidden"
      type: "boolean"
      read-only: true
      description: |
          True if the [Pointer] is hidden, false otherwise.
      samples:
          - code: |
              Pointer:Show()
              print(Pointer.IsHidden) -- false
              Pointer:Hide()
              print(Pointer.IsHidden) -- true

    
